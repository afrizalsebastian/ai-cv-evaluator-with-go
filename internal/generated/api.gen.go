// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// EvaluateBodyRequest defines model for EvaluateBodyRequest.
type EvaluateBodyRequest struct {
	FileId   *string `json:"file_id,omitempty"`
	JobTitle *string `json:"job_title,omitempty"`
}

// EvaluateResponse defines model for EvaluateResponse.
type EvaluateResponse struct {
	Data *struct {
		JobId *string `json:"job_id,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

// ResultResponse defines model for ResultResponse.
type ResultResponse struct {
	Data *struct {
		FileId   *string `json:"file_id,omitempty"`
		Id       *string `json:"id,omitempty"`
		JobTitle *string `json:"job_title,omitempty"`
		Result   *struct {
			CvFeedback      *string `json:"cv_feedback,omitempty"`
			CvMatchRate     *string `json:"cv_match_rate,omitempty"`
			OverallSummary  *string `json:"overall_summary,omitempty"`
			ProjectFeedback *string `json:"project_feedback,omitempty"`
			ProjectScore    *string `json:"project_score,omitempty"`
		} `json:"result,omitempty"`
		Status *string `json:"status,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

// UploadBodyRequest defines model for UploadBodyRequest.
type UploadBodyRequest struct {
	CvFile     openapi_types.File `json:"cv_file"`
	ReportFile openapi_types.File `json:"report_file"`
}

// UploadResponse defines model for UploadResponse.
type UploadResponse struct {
	Data *struct {
		FileId *string `json:"file_id,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

// PostEvaluateJSONRequestBody defines body for PostEvaluate for application/json ContentType.
type PostEvaluateJSONRequestBody = EvaluateBodyRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Evaluate the file that uploaded before
	// (POST /evaluate)
	PostEvaluate(w http.ResponseWriter, r *http.Request)
	// Endpoint Testing
	// (GET /hello)
	GetHello(w http.ResponseWriter, r *http.Request)
	// Get the job result
	// (GET /result/{jobId})
	GetResultJobId(w http.ResponseWriter, r *http.Request, jobId string)
	// Upload File
	// (POST /upload)
	PostUpload(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostEvaluate operation middleware
func (siw *ServerInterfaceWrapper) PostEvaluate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostEvaluate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHello operation middleware
func (siw *ServerInterfaceWrapper) GetHello(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHello(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetResultJobId operation middleware
func (siw *ServerInterfaceWrapper) GetResultJobId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "jobId" -------------
	var jobId string

	err = runtime.BindStyledParameter("simple", false, "jobId", mux.Vars(r)["jobId"], &jobId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "jobId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResultJobId(w, r, jobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUpload operation middleware
func (siw *ServerInterfaceWrapper) PostUpload(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUpload(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/evaluate", wrapper.PostEvaluate).Methods("POST")

	r.HandleFunc(options.BaseURL+"/hello", wrapper.GetHello).Methods("GET")

	r.HandleFunc(options.BaseURL+"/result/{jobId}", wrapper.GetResultJobId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/upload", wrapper.PostUpload).Methods("POST")

	return r
}
